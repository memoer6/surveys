buildscript {

	ext {
		springBootVersion = '1.5.9.RELEASE'		
	}
	
	repositories {
		mavenCentral()	
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")		
	}
}

plugins {
	id 'maven-publish'
	id 'com.palantir.docker' version '0.17.2'
	id 'com.palantir.docker-run' version '0.17.2'
	id 'com.palantir.docker-compose' version '0.17.2'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'application' 
apply plugin: 'idea'



jar {
	baseName = 'surveys'
	version =  '1.0.1'
}

repositories {	
	mavenCentral()	
}

sourceCompatibility = 1.8
targetCompatibility = 1.8



dependencies {
	//add Tomcat and Spring MVC,
	compile("org.springframework.boot:spring-boot-starter-web")
	testCompile("org.springframework.boot:spring-boot-starter-test")
	//Selenium
	compile("org.seleniumhq.selenium:selenium-firefox-driver:3.8.1")
	compile("org.seleniumhq.selenium:selenium-api:3.8.1")		
	compile("org.seleniumhq.selenium:selenium-support:3.8.1")	
	compile("org.seleniumhq.selenium:selenium-remote-driver:3.8.1")
	
	//Firebase cloud messaging
	compile("com.google.api-client:google-api-client:1.23.0") 
		
}



group = 'memoer6'

// ./gradlew docker   (create image) 
//  docker build -t memoer6/surveys:1.0.1 .
docker {
    //image name
    name "${project.group}/${jar.baseName}:${jar.version}"   
    //location of jar file
    files jar.archivePath, 'src/main/resources/service-account.json'
    buildArgs(['JAR_FILE': "${jar.archiveName}", 'ACC': "service-account.json"])
    dockerfile file('src/main/resources/Dockerfile')
    pull true    
}

// ./gradlew dockerRun   (create and run container. Not needed if using docker compose ) 
// containers:	
// docker network create --driver bridge isolated
// docker run -d -p 9001:9001 --name surveys memoer6/surveys:1.0.1  
// docker run -d -p 4444:4444 -p 5900:5900 --name firefox -v /dev/shm:/dev/shm selenium/standalone-firefox-debug:3.8.1-dubnium	
dockerRun {
	name "${jar.baseName}"
	image "${project.group}/${jar.baseName}:${jar.version}"	
	daemonize true
	ports '9001'	
}

// ./gradlew generateDockerCompose  (create docker-compose.yml file from template)
// NOT WORKING
dockerCompose {
	template 'src/main/resources/my-template.yml'
	dockerComposeFile 'src/main/resources/docker-compose.yml'
}



//sudo systemctl start surveys  (run the container from systemd)





